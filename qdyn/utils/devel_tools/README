Guidelines for QDYN developers 

HOW TO JOIN THE QDYN DEVELOPERS TEAM:
-------------------------------------

To join the QDYN developers team contact the QDYN software managers, 
Yingdi Luo and Pablo Ampuero.
You will be granted permission to edit the code in github
and the manual in Google docs.
Github supports the version control systems git and (a flavor of) svn,
as well as online code editing. If you are new to version control systems 
we recommend you to learn how to use svn. The usual work cycle under svn is 
explained in http://svnbook.red-bean.com/nightly/en/svn.tour.cycle.html.
More complete information about svn is found in http://svnbook.red-bean.com/.
The svn commands accessible in github are described in
https://help.github.com/articles/support-for-subversion-clients/.

CODE DEVELOPMENT:
-----------------

  + Do "svn update" regularly, very often, and resolve any conflict to
    merge your working version with the recent changes made by other developers.
    How to resolve conflicts is explained in section "Resolve any conflicts" of
    http://svnbook.red-bean.com/nightly/en/svn.tour.cycle.html.
    We recommend to use the option "postpone" and to follow the instructions 
    in section "Manual conflict resolution".
  + Do "svn update" and resolve conflicts before any "svn commit".
  + If you are not comfortable creating and managing code "branches" in svn, 
    you can work directly on the trunk (master) version. If you do that, before
    any "svn commit" make sure the code compiles and completes successfully
    the test suite by running utils/devel_tools/run_tests.csh
  + Run "devel_tools/mymakedepend.perl" if you have added a new Fortran module 
    or a new "use" command in a Fortran source file. This perl script updates 
    the list of module dependencies in the file Makefile.depend, needed to
    compile the code
  + If you modified the usage of qdyn.m, document it in qdyn.m and 
    in the manual in Google docs.
  + If you modified the manual, export if as pdf and replace by it the file
    doc/QDYN_man_GIT.pdf in github
  + If you added a new feature and you want to minimize the chances of others 
    breaking it, consider adding a test that uses your feature in utils/devel_tools/
    following the template of the existing tests
  + Do not modify the tags/ directory. It contains code releases: versions
    that have been tested and are archived for public release. 
    Discuss release plans with the software managers.
  + Use the ToDo file. Write there missing features, pending tasks and 
    known bugs. Remove items from the list once they have been addressed.
  + Look often for comment lines in the code that contain the keyword "JPA". 
    These are questions, issues or suggestions noted by Pablo Ampuero 
    that need to be addressed.
  + Learn from modifications by other developers. You can browse code changes 
    online on github

CODE STYLE CONVENTIONS :
------------------------

  + Add sufficient comments in the code to allow others to understand it. 
  + Add "!WARNING" or "!NOTE" to your comments
    if part of the code is incomplete, preliminary, only works under 
    specific assumptions, or has a non-trivial impact on other parts of the code
  + Indentation by two spaces
  + Names of variables must be short but meaningful
  + Name of constants and global variables are CAPITALIZED
